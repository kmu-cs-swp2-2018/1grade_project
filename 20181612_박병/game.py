#-*- coding: utf-8 -*-

# Import PyQt
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget
from PyQt5.QtWidgets import QGridLayout
from PyQt5.QtWidgets import QLabel, QLineEdit, QTextEdit
from PyQt5.QtWidgets import QToolButton, QStatusBar

# Import main game logic (from last semester)
from strikeball import StrikeBall


# Main game widget (containing a grid layout)
class SBGame(QWidget):

    def __init__(self, parent=None):
        super().__init__(parent)

        # Title label
        label = QLabel('신나는 숫자야구!')
        font = label.font()
        font.setPointSize(font.pointSize() + 10)
        label.setFont(font)
        label.setAlignment(Qt.AlignCenter)

        # Strikes & balls
        Nlabel = QLabel('숫자: ')
        Nlabel.setAlignment(Qt.AlignRight)
        Slabel = QLabel('스트라이크: ')
        Slabel.setAlignment(Qt.AlignRight)
        Blabel = QLabel('볼: ')
        Blabel.setAlignment(Qt.AlignRight)
        self.Noutput = QLineEdit(self)
        self.Noutput.setReadOnly(True)
        self.Soutput = QLineEdit(self)
        self.Soutput.setReadOnly(True)
        self.Boutput = QLineEdit(self)
        self.Boutput.setReadOnly(True)

        outputLayout = QGridLayout()
        outputLayout.addWidget(Nlabel, 0, 0)
        outputLayout.addWidget(self.Noutput, 0, 1)
        outputLayout.addWidget(Slabel, 1, 0)
        outputLayout.addWidget(self.Soutput, 1, 1)
        outputLayout.addWidget(Blabel, 2, 0)
        outputLayout.addWidget(self.Boutput, 2, 1)

        # User interactions
        self.userInput = QLineEdit(self)
        self.guessButton = QToolButton(self)
        self.guessButton.setText('입력')
        self.newGameButton = QToolButton(self)
        self.newGameButton.setText('새게임')
        self.log = QTextEdit(self)
        self.log.setReadOnly(True)
        self.hintButton = QToolButton(self)
        self.hintButton.setText('도움말')
        
        userLayout = QGridLayout()
        userLayout.addWidget(self.userInput, 0, 0)
        userLayout.addWidget(self.guessButton, 0, 1)
        userLayout.addWidget(self.newGameButton, 1, 1)
        userLayout.addWidget(self.hintButton, 2, 1)
        userLayout.addWidget(self.log, 3, 0, 1, 2)

        # Layout
        mainLayout = QGridLayout()
        mainLayout.addWidget(label, 0, 0)
        mainLayout.addLayout(outputLayout, 1, 0)
        mainLayout.addLayout(userLayout, 2, 0)

        self.setLayout(mainLayout)


class mainWindow(QMainWindow):

    # Define the digit count used in the game
    count = 3

    def __init__(self, parent=None):
        super().__init__(parent)

        # Initialize the main widget
        self.gameWidget = SBGame()
        self.setCentralWidget(self.gameWidget)

        # Window title & status bar
        self.setWindowTitle('Software Project II')
        self.statusBar = QStatusBar(self)
        self.setStatusBar(self.statusBar)

        # Connect button callbacks
        self.gameWidget.guessButton.clicked.connect(self.guessClicked)
        self.gameWidget.newGameButton.clicked.connect(self.startGame)
        self.gameWidget.hintButton.clicked.connect(self.help)

        # Initialize a new game
        self.game = StrikeBall()
        self.startGame()

    def help(self):
        appendedString = " 1. 우리편(나)이 0~9까지 임의의 네자리 수를 정한다."+ '\n' +"2. 상대편(맞추는 사람)이 임의의 3자리 수를 부른다."+ '\n'+ "3. 우리편(나)이 상대편(맞추는 사람)이 부른 3자리 수를 듣고 스트라이크(S), 볼(B)의 개수를 알려준다."+'\n'+"4. 3스트라이크를 알아내면 게임은 끝이난다"
        self.gameWidget.log.setText(appendedString)


    def startGame(self):
        # Start a new game
        self.game.newGame(self.count)

        # Clear dirty output generated by the last game
        self.gameWidget.Noutput.clear()
        self.gameWidget.Soutput.clear()
        self.gameWidget.Boutput.clear()
        self.gameWidget.userInput.clear()
        self.gameWidget.log.clear()

        # Show new game status message and set "game over" flag to False
        self.statusBar.showMessage('New game started - count: %d' % self.count)
        self.gameOver = False


    def guessClicked(self):
        # If the "game over" flag is set, we do not accept any input
        if self.gameOver:
            self.statusBar.showMessage('Game Over!')
            return

        # Clear status bar message, get user input - clear it afterwards
        self.statusBar.clearMessage()
        userGuess = self.gameWidget.userInput.text()
        self.gameWidget.userInput.clear()

        # Check input length, deny if it doesn't match
        userGuesshint = str(userGuess)
        if userGuesshint == "hint" :
           # a = self.game.hint()
            self.statusBar.showMessage('%d in secret number' % self.game.hint())
            return
           # self.game.hint()
        elif userGuesshint == "answer" :
            self.statusBar.showMessage('answer is %d' % self.game.answer())
            return

        elif len(userGuess) != self.count:
            self.statusBar.showMessage('Count must be %d!' % self.count)
            return

        # Do the math - logic is defined in the last semester
        s, b = self.game.guess(userGuess)

        # Format output string and show it to the user
        strikes, balls = ' '.join('O' * s), ' '.join('O' * b)
        self.gameWidget.Noutput.setText(' '.join(userGuess))
        self.gameWidget.Soutput.setText(strikes)
        self.gameWidget.Boutput.setText(balls)

        # We also need some accumulated output to enjoy the game
        logString = '%s -> S: %d, B: %d' % (userGuess, s, b)
        ballcontrol = self.game.getGuessCount1()/self.game.getGuessCount()*100
        appendedString = self.gameWidget.log.toPlainText() + logString +" 당신의 제구력은 : " + str(ballcontrol) + '\n'
        self.gameWidget.log.setText(appendedString)

        # If the user gets enough strikes, congratulate him/her, and
        # don't forget to set the "game over" flag to True
        if s == self.count:
            guessCount = self.game.getGuessCount()
            self.statusBar.showMessage('You got it in %d tries!' % guessCount)
            appendedString = self.gameWidget.log.toPlainText() + '********'
            self.gameWidget.log.setText(appendedString)
            self.gameOver = True


if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    gameWindow = mainWindow()
    gameWindow.show()
    sys.exit(app.exec_())
